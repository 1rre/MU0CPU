// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2020 17:09:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MU0CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MU0CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg boot;
reg CLK;
// wires                                               
wire accen;
wire addSub;
wire [15:0] ALUa;
wire [15:0] ALUb;
wire [15:0] ALUout;
wire [2:0] CurrentState;
wire EQ;
wire Exec1;
wire Exec2;
wire Extra;
wire Fetch;
wire [15:0] FFOut;
wire MI;
wire [11:0] Mux1A;
wire [11:0] Mux1B;
wire Mux1Select;
wire [15:0] MUX2Out;
wire [15:0] Mux3out;
wire mux3sel;
wire [2:0] NextState;
wire ProgCountEnable;
wire ProgCountSynLoad;
wire [11:0] RamAddress;
wire [15:0] RamOut;
wire RamWriteEnable;

// assign statements (if any)                          
MU0CPU i1 (
// port map - connection between master ports and signals/registers   
	.accen(accen),
	.addSub(addSub),
	.ALUa(ALUa),
	.ALUb(ALUb),
	.ALUout(ALUout),
	.boot(boot),
	.CLK(CLK),
	.CurrentState(CurrentState),
	.EQ(EQ),
	.Exec1(Exec1),
	.Exec2(Exec2),
	.Extra(Extra),
	.Fetch(Fetch),
	.FFOut(FFOut),
	.MI(MI),
	.Mux1A(Mux1A),
	.Mux1B(Mux1B),
	.Mux1Select(Mux1Select),
	.MUX2Out(MUX2Out),
	.Mux3out(Mux3out),
	.mux3sel(mux3sel),
	.NextState(NextState),
	.ProgCountEnable(ProgCountEnable),
	.ProgCountSynLoad(ProgCountSynLoad),
	.RamAddress(RamAddress),
	.RamOut(RamOut),
	.RamWriteEnable(RamWriteEnable)
);
initial 
begin 
#250000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	# 5000;
	repeat(24)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
end 

// boot
initial
begin
	boot = 1'b0;
	boot = #10000 1'b1;
end 
endmodule

